# Алгоритм вычисления значения функции F(n), где n  — целое неотрицательное число, задан следующими соотношениями:
# F(0) = 0;
# F(n) = F(n − 1) + 1, если n нечётно;
# F(n) = F(n / 2), если n > 0 и при этом n чётно.
# Укажите количество таких значений n < 1 000 000 000, для которых F(n)  =  2.

# Решение "в лоб" невозможно из-за сложной рекурсии и большого перебора.
# надо обратить внимание на присутствие деления на 2 рекурсивно.
# составим программку и выведем найденные числа в десятичной и двоичной форме:

def f(n):
   if n == 0:
      return 0
   if n % 2 != 0:
      return f(n - 1) + 1
   else:
      return f(n // 2)
for n in range(1, 60):
    if f(n) == 2:
      print(n, '  ', format(n, 'b'))
print('----------------------------------------------------------------------------------------------------------------------')
# При внимательном рассмотрении результатов можно обратить внимание, что все числа в двоичной форме имеют ровно две единицы
# 1 000 000 000 в двоичной системе соответствует  111011100110101100101000000000.
# Ближайшее двоичное число с двумя единицами, это 110000000000000000000000000000 что соответствует числу  805 306 368
# Таким образом, нам необходимо найти все числа, имеющие в двоичной форме ровно две единицы и не превышающие 805 306 368.
# Число  11000 00000 00000 00000 00000 00000  имеет 30 знаков
#
# k = 0
# for i in range(2, 31):
#    print(k)
#    k = k + i - 1
# print(k)

count = 0
for i in range(1, 805306368+1):
   if i % 100000000 == 0: print(i)
   if format(i, 'b').count('1') == 2:
      count += 1
print(count)