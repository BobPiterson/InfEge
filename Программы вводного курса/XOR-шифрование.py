# Программа шифрует заданную строку s (длиной не более 1430 букв, можно русские буквы) функцией XOR
import random
def to_crypto(s : str, key : int) -> str:
    news = ''
    for c in s:
        # Перенос русской кодировки символов в кодировку до 255
        # "А" с кодом 1040 - получаем 168
        # "Я" с кодом 1071 - получаем 199
        # "а" с кодом 1072 - получаем 200
        # "я" с кодом 1103 - получаем 231
        if ord(c) > 255:
            code = ord(c) - 1000 + 128
        else:
            code = ord(c)
        # выравниваем длину кода до 3-х цифр, добавляя "0" впереди:
        if len(str(code)) < 3:
            sym = '0' + str(code)
        else:
            sym = str(code)
        news = news + sym
    if news[0] == '0':
        news = '9' + news[1::]
    open = int(news)
    #print('Исходный текст в символах: ', s)
    #print('Исходный текст в кодах ASCII, выровненный до трех символов на код, с заменой первого символа на 9:', open)
    work_key = int(str(key)[:len(news):])
    #print('Key to_crypt: ', work_key)
    return(str(open ^ work_key))

def from_crypto(s : str, key : int) -> str:
    work_key = int(str(key)[:len(s):])
    #print('Key from_crypt: ', work_key)
    unc = int(s) ^ work_key
    #print('Расшифрованный текст', unc)
    if int(str(unc)[:3:]) > 255:
        tmp = '0' + str(unc)[1::]
    else:
        tmp = str(unc)
    s = ''
    while len(tmp) > 0:
        if tmp[0] == '0':
            s = s + chr(int(tmp[1:3:]))
            tmp = tmp[3::]
        else:
            if int(tmp[:3:]) > 128:
                n = int(tmp[:3:]) - 128 + 1000
            else:
                n = int(tmp[:3:])
            s = s + chr(int(n))
            tmp = tmp[3::]
    #print('Получился текст: ', s)
    return(s)

def key_gen(length: int):
    n = ''
    while len(n) < length:
        n = n + str(random.randint(100 ** 10, 1000 ** 10))
    key = n[:length:]
    #print(key)
    
# key_gen(4300)
# сгенерирован ключ длиной 4300
key = int
# Это строка с текстом, которую требуется зашифровать
s = 'Попробуем русский текст, English, !@#$%^&*()_+{}[]:;"-.?<>`~ 1234567890!'

print('Исходный текст в символах: ', s, ',   длиной: ', len(s))
crypt_text = to_crypto(s, key)
uncrypt_text = from_crypto(crypt_text, key)
print('Расшифрованный текст:      ', uncrypt_text)
print('Зашифрованный текст: ', crypt_text, ',  длиной: ', len(crypt_text))

if s == uncrypt_text:
    print('Исходный и расшифрованный тексты совпадают!')
else:
    print('Ошибка: Исходный и расшифрованный тексты НЕ СОВПАЛИ!')
