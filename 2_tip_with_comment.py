# опробовано на двух вариантах
# ((x ∧ y) ∨ (y ∧ z)) ≡ ((x → w) ∧ (w → z)) 
table = ['0111', '0101', '0100']
# ((x ∧ w) ∨ (w ∧ z)) ≡ ((z → y) ∧ (y → x)) 
# table = ['1011', '1000', '1010']
# print(table)

# Нахождение всех значений x, y, z, w, при которых функция принимает значение True (1). 
# Наборы подходящих значений в виде строк из 4-х символов собираем в список
res = []
for x in range(2):
    for y in range(2):
        for z in range(2):
            for w in range(2):
                if (((x and y) or (y and z)) == ((x <= w) and (w <= z))) == 1:
                # if (((x and w) or (w and z)) == ((z <= y) and (y <= x))) == 1:
                    res.append(str(x)+str(y)+str(z)+str(w))
# print(res)

# Ищем, какая из комбинаций x, y, z, w подходит к заданной таблице table.
vars = ['x', 'y', 'z', 'w']
# Так как участвует четыре переменные, заведем для них индексы, с помощью которых будем индексировать символы в найденных строках
# так, индекс '0' соответствует нулевому символу каждой строки в полученном списке, и т.д. 
# в данной программе символы в строках могут принимать только булевые значения '0' или '1'
index = [0,1,2,3]
# наша задача - перебрать все возможные комбинации расстановки 4-х переменных, чтобы найти нужную комбинацию
# всего возможно 4! = 24 варианта расстановки для 4-х переменных
# для исключения повторения одинаковых переменных при поиске вариантов используем set() 
set1 = set()
for a1 in index:
    for a2 in index:
        for a3  in index:
            for a4 in index:
                set1.add(a1)
                set1.add(a2)
                set1.add(a3)
                set1.add(a4)
                # Если длина набора стала равна 4, значит найдена одна из комбинаций 4-х переменных
                if len(set1) == 4:
                    # объявим пустую строку, в которую будем сохранять k-тый вариант из полученного списка res 
                    m = ''
                    # объявим переменную i в качестве счетчика совпадений найденного варианта с вариантом из заданной таблицы
                    i = 0
                    # пробежимся по всему полученному списку и на каждом шаге цикла будем формировать строку из 4-х символов
                    # при этом булевые символы расположены четко в той последовательности, которая соответствует текущей комбинации
                    for k in range(len(res)):
                        m = res[k][a1] + res[k][a2] + res[k][a3] + res[k][a4]
                        # после получения строки из 4-х символов проверим, есть ли именно такая строка в заданной таблице
                        # если такая строка нашлась, увеличим счетчик совпадений 
                        if m in table:
                            i += 1
                    # когда пробежались по всему списку res и посчитали количество совпавших строк, 
                    # сверим это количество с общим количеством строк в заданной таблице
                    # если, о чудо, мы обнаружили, что все строки в заданной таблице совпали, выводим ответ - 
                    # текущую комбинацию переменных x, y, z, w, при которой таблица совпала 
                    if i == len(table): 
                        print(vars[a1] + vars[a2] + vars[a3] + vars[a4])
                # если данная найденная комбинация не привела к поиску ответа, обнуляем набор и ищем новую комбинацию       
                set1 = set()