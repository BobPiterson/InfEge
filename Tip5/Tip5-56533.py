# 56533
#Алгоритм получает на вход натуральное число N и строит по нему новое число R следующим образом:
#1.  Строится двоичная запись числа N.
#2.  Если сумма цифр десятичной записи заданного числа нечётна, то в конец двоичной записи дописывается 1, если чётна  — 0.
#3−4.  Пункт 2 повторяется для вновь полученных чисел ещё два раза.
#5.  Результатом работы алгоритма становится десятичная запись полученного числа R.

#Пример. Дано число N  =  17. Алгоритм работает следующим образом:
#1.  Строим двоичную запись: 1710  =  100012.
#2.  Сумма цифр числа 17 чётная, дописываем к двоичной записи 0, получаем 1000102  =  3410.
#3.  Сумма цифр числа 34 нечётная, дописываем к двоичной записи 1, получаем 10001012  =  6910.
#4.  Сумма цифр числа 69  — нечётная, дописываем к двоичной записи 1, получаем 100010112  =  13910.
#5.  Результат работы алгоритма R  =  139.

#Определите количество принадлежащих отрезку [987654321; 2123456789] чисел, которые могут получиться в результате работы этого алгоритма.

def do(x) -> int:
# x - двоичная запись числа
    for i in range(3):
        s = sum(ord(j) - ord('0') for j in str(x))
        # Проверяем число s на четность
        if s % 2 != 0:
            x = x * 2 + 1
        else:
            x = x * 2

    return x


def interval(x) -> bool:
    return 987654321 <= x <= 2123456789


n = 987654321 // 8
l = 0
for i in range(n - 1000, n + 1000):
    if interval(do(i)):
        l = i
        break

n = 2123456789 // 8
r = 0
for i in range(n + 1000, n - 1000, -1):
    if interval(do(i)):
        r = i
        break

print(r - l + 1)
